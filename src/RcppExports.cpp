// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/martini.h"
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// getRegressionStats
List getRegressionStats(Eigen::MatrixXd X, Eigen::VectorXd Y);
static SEXP _martini_getRegressionStats_try(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(getRegressionStats(X, Y));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _martini_getRegressionStats(SEXP XSEXP, SEXP YSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_martini_getRegressionStats_try(XSEXP, YSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// maxflow
Eigen::VectorXd maxflow(Eigen::SparseMatrix<double,Eigen::ColMajor> lW, Eigen::VectorXd c);
static SEXP _martini_maxflow_try(SEXP lWSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double,Eigen::ColMajor> >::type lW(lWSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(maxflow(lW, c));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _martini_maxflow(SEXP lWSEXP, SEXP cSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_martini_maxflow_try(lWSEXP, cSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// readGWAS
List readGWAS(std::string pedBasename, std::string phenoFile, std::string netPath, unsigned int encoding, double maf);
static SEXP _martini_readGWAS_try(SEXP pedBasenameSEXP, SEXP phenoFileSEXP, SEXP netPathSEXP, SEXP encodingSEXP, SEXP mafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type pedBasename(pedBasenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type phenoFile(phenoFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type netPath(netPathSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type encoding(encodingSEXP);
    Rcpp::traits::input_parameter< double >::type maf(mafSEXP);
    rcpp_result_gen = Rcpp::wrap(readGWAS(pedBasename, phenoFile, netPath, encoding, maf));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _martini_readGWAS(SEXP pedBasenameSEXP, SEXP phenoFileSEXP, SEXP netPathSEXP, SEXP encodingSEXP, SEXP mafSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_martini_readGWAS_try(pedBasenameSEXP, phenoFileSEXP, netPathSEXP, encodingSEXP, mafSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// runGin
List runGin(Eigen::MatrixXd X, Eigen::VectorXd Y, Eigen::SparseMatrix<double,Eigen::ColMajor> network, Rcpp::List userSettings);
static SEXP _martini_runGin_try(SEXP XSEXP, SEXP YSEXP, SEXP networkSEXP, SEXP userSettingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double,Eigen::ColMajor> >::type network(networkSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type userSettings(userSettingsSEXP);
    rcpp_result_gen = Rcpp::wrap(runGin(X, Y, network, userSettings));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _martini_runGin(SEXP XSEXP, SEXP YSEXP, SEXP networkSEXP, SEXP userSettingsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_martini_runGin_try(XSEXP, YSEXP, networkSEXP, userSettingsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _martini_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*getRegressionStats)(Eigen::MatrixXd,Eigen::VectorXd)");
        signatures.insert("Eigen::VectorXd(*maxflow)(Eigen::SparseMatrix<double,Eigen::ColMajor>,Eigen::VectorXd)");
        signatures.insert("List(*readGWAS)(std::string,std::string,std::string,unsigned int,double)");
        signatures.insert("List(*runGin)(Eigen::MatrixXd,Eigen::VectorXd,Eigen::SparseMatrix<double,Eigen::ColMajor>,Rcpp::List)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _martini_RcppExport_registerCCallable() { 
    R_RegisterCCallable("martini", "_martini_getRegressionStats", (DL_FUNC)_martini_getRegressionStats_try);
    R_RegisterCCallable("martini", "_martini_maxflow", (DL_FUNC)_martini_maxflow_try);
    R_RegisterCCallable("martini", "_martini_readGWAS", (DL_FUNC)_martini_readGWAS_try);
    R_RegisterCCallable("martini", "_martini_runGin", (DL_FUNC)_martini_runGin_try);
    R_RegisterCCallable("martini", "_martini_RcppExport_validate", (DL_FUNC)_martini_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_martini_getRegressionStats", (DL_FUNC) &_martini_getRegressionStats, 2},
    {"_martini_maxflow", (DL_FUNC) &_martini_maxflow, 2},
    {"_martini_readGWAS", (DL_FUNC) &_martini_readGWAS, 5},
    {"_martini_runGin", (DL_FUNC) &_martini_runGin, 4},
    {"_martini_RcppExport_registerCCallable", (DL_FUNC) &_martini_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_martini(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

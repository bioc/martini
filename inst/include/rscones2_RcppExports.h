// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_rscones2_RCPPEXPORTS_H_GEN_
#define RCPP_rscones2_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace rscones2 {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("rscones2", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("rscones2", "rscones2_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in rscones2");
            }
        }
    }

    inline List getRegressionStats(Eigen::MatrixXd X, Eigen::VectorXd Y) {
        typedef SEXP(*Ptr_getRegressionStats)(SEXP,SEXP);
        static Ptr_getRegressionStats p_getRegressionStats = NULL;
        if (p_getRegressionStats == NULL) {
            validateSignature("List(*getRegressionStats)(Eigen::MatrixXd,Eigen::VectorXd)");
            p_getRegressionStats = (Ptr_getRegressionStats)R_GetCCallable("rscones2", "rscones2_getRegressionStats");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_getRegressionStats(Rcpp::wrap(X), Rcpp::wrap(Y));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline Eigen::VectorXd maxflow(Eigen::SparseMatrix<double,Eigen::ColMajor> lW, Eigen::VectorXd c) {
        typedef SEXP(*Ptr_maxflow)(SEXP,SEXP);
        static Ptr_maxflow p_maxflow = NULL;
        if (p_maxflow == NULL) {
            validateSignature("Eigen::VectorXd(*maxflow)(Eigen::SparseMatrix<double,Eigen::ColMajor>,Eigen::VectorXd)");
            p_maxflow = (Ptr_maxflow)R_GetCCallable("rscones2", "rscones2_maxflow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_maxflow(Rcpp::wrap(lW), Rcpp::wrap(c));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::VectorXd >(rcpp_result_gen);
    }

    inline List readBio(std::string pedBasename, std::string phenoFile, std::string netPath, unsigned int encoding, double maf) {
        typedef SEXP(*Ptr_readBio)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_readBio p_readBio = NULL;
        if (p_readBio == NULL) {
            validateSignature("List(*readBio)(std::string,std::string,std::string,unsigned int,double)");
            p_readBio = (Ptr_readBio)R_GetCCallable("rscones2", "rscones2_readBio");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_readBio(Rcpp::wrap(pedBasename), Rcpp::wrap(phenoFile), Rcpp::wrap(netPath), Rcpp::wrap(encoding), Rcpp::wrap(maf));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List runScones(Eigen::MatrixXd X, Eigen::VectorXd Y, Eigen::SparseMatrix<double,Eigen::ColMajor> network, Rcpp::List userSettings) {
        typedef SEXP(*Ptr_runScones)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_runScones p_runScones = NULL;
        if (p_runScones == NULL) {
            validateSignature("List(*runScones)(Eigen::MatrixXd,Eigen::VectorXd,Eigen::SparseMatrix<double,Eigen::ColMajor>,Rcpp::List)");
            p_runScones = (Ptr_runScones)R_GetCCallable("rscones2", "rscones2_runScones");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_runScones(Rcpp::wrap(X), Rcpp::wrap(Y), Rcpp::wrap(network), Rcpp::wrap(userSettings));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List testAssociations(int statistic, std::string filesPath, double lambda, double eta) {
        typedef SEXP(*Ptr_testAssociations)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_testAssociations p_testAssociations = NULL;
        if (p_testAssociations == NULL) {
            validateSignature("List(*testAssociations)(int,std::string,double,double)");
            p_testAssociations = (Ptr_testAssociations)R_GetCCallable("rscones2", "rscones2_testAssociations");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_testAssociations(Rcpp::wrap(statistic), Rcpp::wrap(filesPath), Rcpp::wrap(lambda), Rcpp::wrap(eta));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline std::vector<Rcpp::List> testAssociationsCustomGridsearch(int statistic, std::string filesPath, int min, int max) {
        typedef SEXP(*Ptr_testAssociationsCustomGridsearch)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_testAssociationsCustomGridsearch p_testAssociationsCustomGridsearch = NULL;
        if (p_testAssociationsCustomGridsearch == NULL) {
            validateSignature("std::vector<Rcpp::List>(*testAssociationsCustomGridsearch)(int,std::string,int,int)");
            p_testAssociationsCustomGridsearch = (Ptr_testAssociationsCustomGridsearch)R_GetCCallable("rscones2", "rscones2_testAssociationsCustomGridsearch");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_testAssociationsCustomGridsearch(Rcpp::wrap(statistic), Rcpp::wrap(filesPath), Rcpp::wrap(min), Rcpp::wrap(max));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<Rcpp::List> >(rcpp_result_gen);
    }

    inline List testAssociationsGridsearch(int statistic, std::string filesPath, unsigned int gridparams, int griddepth, unsigned int criterion) {
        typedef SEXP(*Ptr_testAssociationsGridsearch)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_testAssociationsGridsearch p_testAssociationsGridsearch = NULL;
        if (p_testAssociationsGridsearch == NULL) {
            validateSignature("List(*testAssociationsGridsearch)(int,std::string,unsigned int,int,unsigned int)");
            p_testAssociationsGridsearch = (Ptr_testAssociationsGridsearch)R_GetCCallable("rscones2", "rscones2_testAssociationsGridsearch");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_testAssociationsGridsearch(Rcpp::wrap(statistic), Rcpp::wrap(filesPath), Rcpp::wrap(gridparams), Rcpp::wrap(griddepth), Rcpp::wrap(criterion));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_rscones2_RCPPEXPORTS_H_GEN_

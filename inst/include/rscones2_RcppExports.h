// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_rscones2_RCPPEXPORTS_H_GEN_
#define RCPP_rscones2_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace rscones2 {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("rscones2", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("rscones2", "rscones2_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in rscones2");
            }
        }
    }

    inline Eigen::VectorXd maxflow(Eigen::SparseMatrix<double,Eigen::ColMajor> lW, Eigen::VectorXd c) {
        typedef SEXP(*Ptr_maxflow)(SEXP,SEXP);
        static Ptr_maxflow p_maxflow = NULL;
        if (p_maxflow == NULL) {
            validateSignature("Eigen::VectorXd(*maxflow)(Eigen::SparseMatrix<double,Eigen::ColMajor>,Eigen::VectorXd)");
            p_maxflow = (Ptr_maxflow)R_GetCCallable("rscones2", "rscones2_maxflow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_maxflow(Rcpp::wrap(lW), Rcpp::wrap(c));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::VectorXd >(rcpp_result_gen);
    }

    inline std::vector<Rcpp::List> test_associations_custom_gridsearch(int statistic, std::string filesPath, int min, int max) {
        typedef SEXP(*Ptr_test_associations_custom_gridsearch)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_test_associations_custom_gridsearch p_test_associations_custom_gridsearch = NULL;
        if (p_test_associations_custom_gridsearch == NULL) {
            validateSignature("std::vector<Rcpp::List>(*test_associations_custom_gridsearch)(int,std::string,int,int)");
            p_test_associations_custom_gridsearch = (Ptr_test_associations_custom_gridsearch)R_GetCCallable("rscones2", "rscones2_test_associations_custom_gridsearch");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_associations_custom_gridsearch(Rcpp::wrap(statistic), Rcpp::wrap(filesPath), Rcpp::wrap(min), Rcpp::wrap(max));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<Rcpp::List> >(rcpp_result_gen);
    }

    inline List test_associations_gridsearch(int statistic, std::string filesPath, int nparams) {
        typedef SEXP(*Ptr_test_associations_gridsearch)(SEXP,SEXP,SEXP);
        static Ptr_test_associations_gridsearch p_test_associations_gridsearch = NULL;
        if (p_test_associations_gridsearch == NULL) {
            validateSignature("List(*test_associations_gridsearch)(int,std::string,int)");
            p_test_associations_gridsearch = (Ptr_test_associations_gridsearch)R_GetCCallable("rscones2", "rscones2_test_associations_gridsearch");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_associations_gridsearch(Rcpp::wrap(statistic), Rcpp::wrap(filesPath), Rcpp::wrap(nparams));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List test_associations(int statistic, std::string filesPath, double eta, double lambda) {
        typedef SEXP(*Ptr_test_associations)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_test_associations p_test_associations = NULL;
        if (p_test_associations == NULL) {
            validateSignature("List(*test_associations)(int,std::string,double,double)");
            p_test_associations = (Ptr_test_associations)R_GetCCallable("rscones2", "rscones2_test_associations");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_associations(Rcpp::wrap(statistic), Rcpp::wrap(filesPath), Rcpp::wrap(eta), Rcpp::wrap(lambda));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_rscones2_RCPPEXPORTS_H_GEN_

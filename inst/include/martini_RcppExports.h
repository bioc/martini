// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_martini_RCPPEXPORTS_H_GEN_
#define RCPP_martini_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace martini {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("martini", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("martini", "_martini_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in martini");
            }
        }
    }

    inline List get_regression_stats(Eigen::MatrixXd X, Eigen::VectorXd Y) {
        typedef SEXP(*Ptr_get_regression_stats)(SEXP,SEXP);
        static Ptr_get_regression_stats p_get_regression_stats = NULL;
        if (p_get_regression_stats == NULL) {
            validateSignature("List(*get_regression_stats)(Eigen::MatrixXd,Eigen::VectorXd)");
            p_get_regression_stats = (Ptr_get_regression_stats)R_GetCCallable("martini", "_martini_get_regression_stats");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_regression_stats(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Y)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline Eigen::VectorXd maxflow(Eigen::SparseMatrix<double,Eigen::ColMajor> lW, Eigen::VectorXd c) {
        typedef SEXP(*Ptr_maxflow)(SEXP,SEXP);
        static Ptr_maxflow p_maxflow = NULL;
        if (p_maxflow == NULL) {
            validateSignature("Eigen::VectorXd(*maxflow)(Eigen::SparseMatrix<double,Eigen::ColMajor>,Eigen::VectorXd)");
            p_maxflow = (Ptr_maxflow)R_GetCCallable("martini", "_martini_maxflow");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_maxflow(Shield<SEXP>(Rcpp::wrap(lW)), Shield<SEXP>(Rcpp::wrap(c)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::VectorXd >(rcpp_result_gen);
    }

    inline List read_gwas(std::string pedBasename, std::string phenoFile, std::string netPath, unsigned int encoding, double maf) {
        typedef SEXP(*Ptr_read_gwas)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_read_gwas p_read_gwas = NULL;
        if (p_read_gwas == NULL) {
            validateSignature("List(*read_gwas)(std::string,std::string,std::string,unsigned int,double)");
            p_read_gwas = (Ptr_read_gwas)R_GetCCallable("martini", "_martini_read_gwas");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_read_gwas(Shield<SEXP>(Rcpp::wrap(pedBasename)), Shield<SEXP>(Rcpp::wrap(phenoFile)), Shield<SEXP>(Rcpp::wrap(netPath)), Shield<SEXP>(Rcpp::wrap(encoding)), Shield<SEXP>(Rcpp::wrap(maf)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List run_shake(Eigen::MatrixXd X, Eigen::VectorXd Y, Eigen::SparseMatrix<double,Eigen::ColMajor> network, Rcpp::List userSettings) {
        typedef SEXP(*Ptr_run_shake)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_shake p_run_shake = NULL;
        if (p_run_shake == NULL) {
            validateSignature("List(*run_shake)(Eigen::MatrixXd,Eigen::VectorXd,Eigen::SparseMatrix<double,Eigen::ColMajor>,Rcpp::List)");
            p_run_shake = (Ptr_run_shake)R_GetCCallable("martini", "_martini_run_shake");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_shake(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(network)), Shield<SEXP>(Rcpp::wrap(userSettings)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_martini_RCPPEXPORTS_H_GEN_
